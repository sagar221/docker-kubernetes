node
{
    stage('Checkout')
    {
        checkout([$class: 'GitSCM',
        branches: [[name: '*/master']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[
            credentialsId: 'jenkins_kube',
            url: 'https://github.com/abhijitsingamaneni/Jenkins_with_Kubernetes.git']]])

    }
    
    stage('Docker file build')
    {
        sh 'ls -l'
        sh "sudo docker build -t abhijit1417/maven:${env.BUILD_NUMBER} ."
    }
    
    stage('push to docker registory')
    {
        // This step should not normally be used in your script. Consult the inline help for details.
        withDockerRegistry([credentialsId: 'c085882d-5c39-48bf-a974-0e578e595d9e', url: 'https://registry.hub.docker.com']) {
           sh "sudo docker push abhijit1417/maven:${env.BUILD_NUMBER}"
        }
    }
}node
{
    stage('Checkout')
    {
        checkout([$class: 'GitSCM',
        branches: [[name: '*/master']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[
            credentialsId: 'jenkins_kube',
            url: 'https://github.com/sagar221/docker-kubernetes.git']]])

    }
    
    stage('Docker file build')
    {
        sh 'ls -l'
        sh "sudo docker build -t sagar221/maven:${env.BUILD_NUMBER} ."
    }
    
    stage('push to docker registory')
    {
        // This step should not normally be used in your script. Consult the inline help for details.
        withDockerRegistry([credentialsId: 'c085882d-5c39-48bf-a974-0e578e595d9e', url: 'https://registry.hub.docker.com']) {
           sh "sudo docker push sagar221/maven:${env.BUILD_NUMBER}"
        }
    }

    {

	// Create namespace if it doesn't exist
        	sh("kubectl get ns ${env.BRANCH_NAME} || kubectl create ns ${env.BRANCH_NAME}")
        	// Don't use public load balancing for development branches
		sh("sed -i "s/SB_DIMG_VERSION/${app_branch_name}${dimg_version}/g" deployment.yaml")
        	sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${imageTag}#' ./k8s/dev/*.yaml")
	        sh("kubectl --namespace=${env.BRANCH_NAME} apply -f k8s/services/")
        	sh("kubectl --namespace=${env.BRANCH_NAME} apply -f k8s/dev/")
	        echo 'To access your environment run `kubectl proxy`'
        	echo "Then access your service via http://localhost:8001/api/v1/proxy/namespaces/${env.BRANCH_NAME}/services/${feSvcName}:80/"

     }
}
